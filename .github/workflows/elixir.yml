# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  TOOLCHAIN: nightly
  CARGO_CACHE_PATH: |
    ./native/iroh_ex/target/
    ~/.cargo/.crates.toml
    ~/.cargo/.crates2.json
    ~/.cargo/bin/
    ~/.cargo/registry/index/
    ~/.cargo/registry/cache/
    ~/.cargo/git/db/

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]
        test-config: 
          - {
            node_cnt: 5,
            msg_cnt: 1_000,
          }
          - {
            node_cnt: 5,
            msg_cnt: 10_000,
          }
          - {
            node_cnt: 5,
            msg_cnt: 20_000,
          }
          - {
            node_cnt: 5,
            msg_cnt: 100_000,
          }
          - {
            node_cnt: 10,
            msg_cnt: 100_000,
          }
          - {
            node_cnt: 50,
            msg_cnt: 100_000,
          }
          - {
            node_cnt: 100,
            msg_cnt: 100_000,
          }
          - {
            node_cnt: 100,
            msg_cnt: 500_000,
            rand_msg_delay: 500
          }
          - {
            node_cnt: 200,
            msg_cnt: 500_000,
            rand_msg_delay: 1000
          }
    name: Build and test
    runs-on: ${{matrix.platform}}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Nightly (Explicit Version)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          #Â llvm-tools-preview stuff is essential, breaks the build otherwise
          components: rust-src, llvm-tools-preview

      - name: Show Rustup Info
        run: |
          rustup show
          echo "TOOLCHAIN: ${{ env.TOOLCHAIN }}"

      - name: Install LLVM tools
        if: runner.os == 'macOS'
        continue-on-error: true
        run: rustup component add llvm-tools-preview

      - name: Rust Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CARGO_CACHE_PATH }}
          key: cargo-${{ github.workflow }}-${{ github.job }}-${{runner.os}}-${{runner.arch}}-${{hashFiles('native/iroh_ex/Cargo.lock')}}

      - name: Cache ASDF and Toolchains
        uses: actions/cache@v4
        id: asdf-cache
        with:
          path: ~/.asdf
          key: asdf-cache-${{ runner.os }}-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            asdf-cache-${{ runner.os }}-

      - name: Setup asdf env
        id: asdf-setup
        run: |
          echo PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH" >> "$GITHUB_ENV"
      - name: Setup asdf
        uses: asdf-vm/actions/setup@master

      - name: Install CD tools from .tool-versions
        continue-on-error: true
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        uses: asdf-vm/actions/install@master
      - name: Test asdf tools
        id: asdf-test
        run: |
          erl -version
          elixir --version
          mix --version

      - name: Ensure mix dependencies
        shell: bash
        run: mix deps.get

      # save even if later jobs fail
      - name: Cache ASDF and Toolchains
        uses: actions/cache/save@v4
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        id: asdf-cache-save
        with:
          path: ~/.asdf
          key: asdf-cache-${{ runner.os }}-${{ hashFiles('.tool-versions') }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix deps.get

      - name: "Run tests Nodes: ${{matrix.test-config.node_cnt}} Msgs: ${{matrix.test-config.msg_cnt}}"
        run: |
          # not allowed on github runner :( ulimit -n 500000

          NODE_CNT=${{matrix.test-config.node_cnt}} \
          MSG_CNT=${{matrix.test-config.msg_cnt}} \
          RAND_MSG_DELAY=${{matrix.test-config.rand_msg_delay}} \
          MIX_ENV=dev \
          mix test
