# Kino Sigma js

```elixir
Mix.install([
  {:kino, "~> 0.15.3"},
  # {:kuzu_nif, "~> 0.7.0"},
  {:iroh_ex, "~> 0.0.1"},
  {:rustler, "~> 0.36.1", override: true},
  {:rustler_precompiled, "~> 0.7"}
])
```

## Section

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule SigmaGraph do
  use Kino.JS
  use Kino.JS.Live

  def new do
    Kino.JS.Live.new(__MODULE__, %{})
  end

  # Add a node
  def add_node(kino, node, replace \\ false) do
    Kino.JS.Live.cast(kino, {:add_node, node, replace})
  end

  # Remove a node
  def remove_node(kino, node_id) do
    Kino.JS.Live.cast(kino, {:remove_node, node_id})
  end

  # Add an edge
  def add_edge(kino, edge) do
    Kino.JS.Live.cast(kino, {:add_edge, edge})
  end

  # Remove an edge
  def remove_edge(kino, edge) do
    Kino.JS.Live.cast(kino, {:remove_edge, edge})
  end

  def test(kino, payload) do
    Kino.JS.Live.cast(kino, {:test, payload})
  end

  @impl true
  def init(_, ctx) do
    {:ok, assign(ctx, nodes: %{}, edges: [])}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, ctx.assigns, ctx}
  end

  @impl true
  def handle_cast({:test, payload}, ctx) do
    # IO.inspect(payload, label: "Test")
    broadcast_event(ctx, "test", payload)
    {:noreply, ctx}
  end

  @impl true
  def handle_cast({:add_node, node, replace}, ctx) do
    ctx = update_in(ctx.assigns.nodes, &Map.put(&1, node.id, node))
    # IO.inspect(node, label: "Add Node")
    # IO.inspect(ctx, label: "Add Node ctx")
    broadcast_event(
      ctx,
      "add_node",
      node |> Map.put(:replace, replace)
    )

    {:noreply, ctx}
  end

  @impl true
  def handle_cast({:add_edge, edge}, ctx) do
    ctx = update_in(ctx.assigns.edges, &[edge | &1])
    broadcast_event(ctx, "add_edge", edge)
    {:noreply, ctx}
  end

  @impl true
  def handle_cast({:remove_node, node_id}, ctx) do
    ctx = update_in(ctx.assigns.nodes, &Map.delete(&1, node_id))

    # Correctly filter out edges that involve the removed node
    ctx =
      update_in(
        ctx.assigns.edges,
        &Enum.reject(&1, fn edge ->
          edge.source == node_id || edge.target == node_id
        end)
      )

    broadcast_event(ctx, "remove_node", node_id)
    {:noreply, ctx}
  end

  @impl true
  def handle_cast({:remove_edge, edge}, ctx) do
    ctx =
      update_in(
        ctx.assigns.edges,
        &Enum.reject(&1, fn e ->
          edge.source == e.source && edge.target == e.target
        end)
      )

    broadcast_event(ctx, "remove_edge", edge)
    {:noreply, ctx}
  end

  asset "main.js" do
    """
    import Sigma from 'https://cdn.jsdelivr.net/npm/sigma@3.0.1/+esm';
    import Graph from 'https://cdn.jsdelivr.net/npm/graphology@0.26.0/+esm';
    import graphologyLayout from 'https://cdn.jsdelivr.net/npm/graphology-layout@0.6.1/+esm';
    import FA2Layout from 'https://cdn.jsdelivr.net/npm/graphology-layout-forceatlas2@0.10.1/+esm';
    import graphOlogyLayoutForce from 'https://cdn.jsdelivr.net/npm/graphology-layout-force@0.2.4/+esm';

    const { circular } = graphologyLayout;

    export function init(ctx, payload) {
      const container = document.createElement("div");
      container.style.width = "100%";
      container.style.height = "500px";
      ctx.root.appendChild(container);

      const graph = new Graph();
      const renderer = new Sigma(graph, container, {
        labelDensity: 0.2,
        labelRenderedSizeThreshold: 10,
        defaultLabelSize: 14,
      });

      // Store full labels separately
      const fullLabels = {};

      function formatLabel(label) {
        return label.length > 20 ? label.substring(0, 20) + "..." : label;
      }

      function adjustLabelPositions() {
        graph.updateEachNodeAttributes((node, attr) => ({
          ...attr,
          labelY: attr.y + 0.2,  // Move label slightly outside the node
        }));
      }

      ctx.handleEvent("add_node", (node) => {
        console.log("Add node", node);

        if (node.replace || !graph.hasNode(node.id)) {
          if (node.replace && graph.hasNode(node.id)) {
            graph.dropNode(node.id);
          }

          fullLabels[node.id] = node.label;

          graph.addNode(node.id, {
            x: Math.random(),
            y: Math.random(),
            label: formatLabel(node.label), // Use shortened label by default
            size: 10,
            color: "#1f77b4",
          });

          circular.assign(graph);
          adjustLabelPositions();
        } else {
          console.log("Node " + node.id + " already exists, ignore");
        }
        renderer.refresh();
      });

      ctx.handleEvent("remove_node", (nodeId) => {
        if (graph.hasNode(nodeId)) {
          graph.dropNode(nodeId);
          delete fullLabels[nodeId];
        }
        renderer.refresh();
      });

      ctx.handleEvent("add_edge", ({ source, target }) => {
        if (graph.hasNode(source) && graph.hasNode(target) && !graph.hasEdge(source, target)) {
          graph.addEdge(source, target);
        }
        renderer.refresh();
      });

      ctx.handleEvent("remove_edge", ({ source, target }) => {
        if (graph.hasEdge(source, target)) {
          graph.dropEdge(source, target);
        }
        renderer.refresh();
      });

      // Show full label on hover
      renderer.on("enterNode", ({ node }) => {
        graph.setNodeAttribute(node, "label", fullLabels[node]);
        renderer.refresh();
      });

      // Restore shortened label when mouse leaves
      renderer.on("leaveNode", ({ node }) => {
        graph.setNodeAttribute(node, "label", formatLabel(fullLabels[node]));
        renderer.refresh();
      });
    }

    """
  end
end

graph = SigmaGraph.new()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Process.sleep(500)
# SigmaGraph.test(graph, %{key: "Key", value: "Node A"})

# Add some nodes
SigmaGraph.add_node(graph, %{id: "A", label: "Node A"})
SigmaGraph.add_node(graph, %{id: "B", label: "Node B"})

# Add an edge
SigmaGraph.add_edge(graph, %{source: "A", target: "B"})

# Remove a node
# SigmaGraph.remove_node(graph, "A")

# Remove an edge

# SigmaGraph.add_node(graph, %{id: "A", label: "Node A"})
# SigmaGraph.add_node(graph, %{id: "B", label: "Node B"})
# SigmaGraph.add_edge(graph, %{source: "A", target: "B"})
# SigmaGraph.remove_node(graph, "Node 1")
# SigmaGraph.remove_node(graph, "A")
# SigmaGraph.remove_edge(graph, %{source: "A", target: "B"})

IO.inspect(graph, label: "Outside")

defmodule ProcessMonitor do
  use GenServer

  # Starts the GenServer and initiates tracing
  def start_link(graph) do
    case Process.whereis(__MODULE__) do
      nil ->
        IO.puts("#{__MODULE__} No Process running")
        SigmaGraph.add_node(graph, %{id: "Status", label: "No Process running"}, true)
        GenServer.start_link(__MODULE__, graph, name: __MODULE__)
        SigmaGraph.add_node(graph, %{id: "Status", label: "Process started"}, true)

      pid when is_pid(pid) ->
        IO.puts("#{__MODULE__} Process already running #{inspect(pid)}")
        Process.exit(pid, :kill)
        SigmaGraph.add_node(graph, %{id: "Status", label: "Killing existing Process"}, true)
        # Wait a moment to ensure the process exits
        Process.sleep(100)
        GenServer.start_link(__MODULE__, graph, name: __MODULE__)
        SigmaGraph.add_node(graph, %{id: "Status", label: "Process started"}, true)
    end
  end

  @impl true
  def init(graph) do
    # Set up tracing for all processes
    IO.inspect(graph, label: "Init ProcessMonitor")
    :erlang.trace(:all, true, [:procs])
    {:ok, %{graph: graph}}
  end

  defp format_pid(pid) do
    formatted = inspect(pid)
    # |> String.replace("#", "") # Original commented out lines
    # |> String.replace("<", "")
    # |> String.replace(">", "")
    # |> String.replace(".", "")

    formatted

    # IO.inspect(formatted, label: "formatted pid") # Original commented out line
  end

  @impl true
  def handle_info({:trace, pid, :spawn, new_pid, mfa}, %{graph: graph} = state) do
    # IO.inspect(graph, label: "Graph debug") # Original commented out line
    IO.puts("Process #{inspect(new_pid)} spawned by #{inspect(pid)}: #{inspect(mfa)}")

    SigmaGraph.add_node(graph, %{
      id: "#{format_pid(pid)}",
      label: "Process #{format_pid(pid)}, MFA: #{TraceParser.extract_mfa(mfa)}"
    })

    SigmaGraph.add_node(graph, %{
      id: "#{format_pid(new_pid)}",
      label: "Process #{format_pid(new_pid)}, MFA: #{TraceParser.extract_mfa(mfa)}"
    })

    # SigmaGraph.add_edge(graph, %{source: format_pid(pid), target: format_pid(new_pid)}) # Original commented out line
    # {:noreply, state |> Map.put(:graph, graph)} # Original commented out line
    # Original return value
    {:noreply, state}
  end

  def handle_info({:trace, pid, :exit, reason}, %{graph: graph} = state) do
    IO.puts("Process #{inspect(pid)} exited with reason: #{inspect(reason)}")
    SigmaGraph.remove_node(graph, "#{format_pid(pid)}")
    # {:noreply, state |> Map.put(:graph, graph)} # Original commented out line
    # Original return value
    {:noreply, state}
  end

  def handle_info({:trace, pid, :link, linked_pid}, %{graph: graph} = state) do
    IO.puts("Process #{inspect(pid)} linked to #{inspect(linked_pid)}")
    SigmaGraph.add_node(graph, %{id: "#{format_pid(pid)}", label: "Process #{format_pid(pid)}"})

    SigmaGraph.add_node(graph, %{
      id: "#{format_pid(linked_pid)}",
      label: "Process #{format_pid(linked_pid)}"
    })

    SigmaGraph.add_edge(graph, %{
      source: "#{format_pid(pid)}",
      target: "#{format_pid(linked_pid)}"
    })

    # {:noreply, state |> Map.put(:graph, graph)} # Original commented out line
    # Original return value
    {:noreply, state}
  end

  def handle_info({:trace, pid, :unlink, unlinked_pid}, %{graph: graph} = state) do
    IO.puts("Process #{inspect(pid)} unlinked from #{inspect(unlinked_pid)}")

    SigmaGraph.remove_edge(graph, %{
      source: "#{format_pid(pid)}",
      target: "#{format_pid(unlinked_pid)}"
    })

    # {:noreply, state |> Map.put(:graph, graph)} # Original commented out line
    # Original return value
    {:noreply, state}
  end

  def handle_info(_msg, state) do
    {:noreply, state}
  end
end

defmodule TraceParser do
  def extract_mfa({mod, fun, args}) when is_atom(mod) and is_atom(fun) and is_list(args) do
    "#{mod}.#{fun}/#{length(args)}"
  end

  def extract_mfa({:erlang, :apply, [func, _]}) when is_function(func, 0) do
    func_info = inspect(func)

    case String.split(func_info, " in ") do
      [_, mfa] -> mfa
      _ -> "UnknownFunction"
    end
  end

  def extract_mfa(_), do: "UnknownFunction"
end

defmodule Worker do
  use GenServer

  def start_link(_) do
    # Unique name
    GenServer.start_link(__MODULE__, %{}, name: :erlang.make_ref())
  end

  def init(_) do
    # Live for 2-5 seconds
    lifespan = :rand.uniform(3000) + 2000
    Process.send_after(self(), :die, lifespan)
    {:ok, %{}}
  end

  def handle_info(:die, _state) do
    IO.puts("Worker #{inspect(self())} exiting")
    exit(:normal)
  end
end

defmodule WorkerSupervisor do
  use Supervisor

  def start_link(_) do
    Supervisor.start_link(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    children = [
      # Defines a Worker child spec
      {Worker, []}
    ]

    Supervisor.init(children, strategy: :simple_one_for_one)
  end
end

defmodule WorkerManager do
  use GenServer

  def start_link(_) do
    GenServer.start_link(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    # Start workers after a delay
    Process.send_after(self(), :start_workers, :rand.uniform(5000))
    {:ok, %{}}
  end

  def handle_info(:start_workers, state) do
    # 1 to 10 workers
    num_workers = :rand.uniform(10)

    for _ <- 1..num_workers do
      Supervisor.start_child(WorkerSupervisor, [])
    end

    IO.puts("Spawned #{num_workers} workers")

    # Schedule the next batch
    Process.send_after(self(), :start_workers, :rand.uniform(5000))

    {:noreply, state}
  end
end

defmodule SupervisorExample do
  def start_link do
    # Start the Worker Supervisor
    {:ok, _} = WorkerSupervisor.start_link([])

    # Start the Worker Manager
    {:ok, _} = WorkerManager.start_link([])
  end
end

pid = ProcessMonitor.start_link(graph)
# Start the system
sup_pid = SupervisorExample.start_link()

# SigmaGraph.add_node(graph, %{id: "Test", label: "Test label"})
# receive do
# msg -> IO.inspect(msg, label: "Msg received")
# end
# IrohMsgAdapter.loop(graph)
```
